generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id         Int       @id @unique @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  name       String    @unique
  password   String    @map("password")
  masterName String?   @unique @map("master_name")

  characters    Character[]
  gamesAsMaster Game[]         @relation("MasterGames")
  RefreshToken  RefreshToken[]

  @@map("players")
}

model Character {
  id        Int       @id @unique @default(autoincrement())
  nickname  String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  playerId  Int       @map("player_id")
  gameId    Int       @map("game_id")

  Player Player @relation(fields: [playerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("characters")
}

model RefreshToken {
  id        Int      @id @unique @default(autoincrement())
  token     String
  expiresIn DateTime @map("expires_in")
  createdAt DateTime @default(now()) @map("created_at")
  playerId  Int      @map("player_id")

  Player Player @relation(fields: [playerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("refresh_tokens")
}

model Game {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  masterId  Int      @map("master_id")

  characters Character[]
  master     Player      @relation("MasterGames", fields: [masterId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("games")
}
